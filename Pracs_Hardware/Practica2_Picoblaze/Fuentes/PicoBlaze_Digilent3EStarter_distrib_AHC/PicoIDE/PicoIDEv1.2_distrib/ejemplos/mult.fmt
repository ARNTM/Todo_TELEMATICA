  1   0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  2   0              ;                 Ejemplo 4:
  3   0              ;multiplica dos numeros de 8 bits 
  4   0              ;
  5   0              ; (C) Javier Garrigos. Ver. 1.0 - sep,2004
  6   0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7   0              ;
  8   0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9   0              ;declaracion de constantes y variables
 10   0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
 11   0              :NAMEREG    S0           MULTIPLICANDO 
 12   0              :NAMEREG    S1           MULTIPLICADOR 
 13   0              :NAMEREG    S2           BIT_MASK     
 14   0              :NAMEREG    S3           RESULT_MSB   
 15   0              :NAMEREG    S4           RESULT_LSB   
 16   0              ;                
 17   0              :ADDRESS    00           ;el programa se cargara a partir de 00
 18   0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19   0              ;inicio del programa
 20   0              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 21   0 START        :INPUT      S0           00           ;cargamos el multiplicando
 22   1              :INPUT      S1           01           ;cargamos el multiplicador
 23   2              :CALL       MULT         ;hacemos la multiplicacion
 24   3              :JUMP       START        
 25   4              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 26   4              ;Rutina de multiplicacion
 27   4              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 28   4 MULT         :LOAD       BIT_MASK     01           ; comenzamos con el LSB
 29   5              :LOAD       RESULT_MSB   00           ; inicializamos producto MSB
 30   6              :LOAD       RESULT_LSB   00           ; inicializamos producto LSB
 31   7              ; para los 8 bits del multiplicador
 32   7 MULT_LOOP    :LOAD       S4           MULTIPLICADOR ;
 33   8              :AND        S4           BIT_MASK     ; si el bit del multiplicador esta a 1
 34   9              :JUMP       Z            NO_ADD       ; si no, no hace la suma
 35   A              :ADD        RESULT_MSB   MULTIPLICANDO ; 
 36   B NO_ADD       :SRA        RESULT_MSB   ; shift MSB right, CARRY into bit 7, lsb into CARRY
 37   C              :SRA        RESULT_LSB   ; shift LSB right, lsb from result_msb into bit 7
 38   D              :SL0        BIT_MASK     ; shift bit_mask left to examine next bit in multiplier
 39   E              :JUMP       NZ           MULT_LOOP    ; if all bit examined, then bit_mask = 0, loop if not 0
 40   F              :OR         S0           S1           
 41  10              :XOR        S1           S0           
 42  11              :RETURN     ; multiplier result now available in result_msb and result_lsb
 43  12              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 44  12              ; FIN
 45  12              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
